package br.org.ciee.kairos.vagas.api.controller.alteradadoscontrato;

import java.text.ParseException;
import java.util.List;
import java.util.Objects;

import org.apache.xpath.operations.NotEquals;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.org.ciee.kairos.vagas.api.cliente.alteradadoscontrato.AlteraDadosContratoContractService;
import br.org.ciee.kairos.vagas.api.cliente.alteradadoscontrato.AlteraDadosContratoDTO;
import br.org.ciee.kairos.vagas.api.exception.EstudanteSemPermissaoContratoException;
import br.org.ciee.kairos.vagas.api.mapper.alteradadoscontrato.AlteraDadosContratoMapper;
import br.org.ciee.kairos.vagas.api.utils.ValidacaoUsuario;
import br.org.ciee.kairos.vagas.business.exception.contratoestudanteempresa.ContratoEstudanteEmpresaNotFoundException;
import br.org.ciee.kairos.vagas.business.model.dtos.esocial.DadosESocialDTO;
import br.org.ciee.kairos.vagas.business.model.entity.Municipio;
import br.org.ciee.kairos.vagas.business.model.entity.contrato.ContratoEstudanteEmpresa;
import br.org.ciee.kairos.vagas.business.service.contratoestudanteempresa.ContratoEstudanteEmpresaService;
import br.org.ciee.kairos.vagas.common.enums.cse.SituacaoConfirmacao;
import br.org.ciee.kairos.vagas.common.enums.cse.SituacaoContratoCSE;
import io.swagger.annotations.Api;

@RestController
@Api("Endpoint para alterar os dados dos contratos")
public class AlteraDadosContratoController implements AlteraDadosContratoContractService{
	
	//	private final AlteraDadosContratoService alteraDadosContratoService;
	private final AlteraDadosContratoMapper alteraDadosContratoMapper;
	private final ContratoEstudanteEmpresaService contratoEstudanteEmpresaService;
	
	public AlteraDadosContratoController(
			AlteraDadosContratoMapper alteraDadosContratoMapper,
			ContratoEstudanteEmpresaService contratoEstudanteEmpresaService) {
		this.alteraDadosContratoMapper = alteraDadosContratoMapper;
		this.contratoEstudanteEmpresaService = contratoEstudanteEmpresaService;
	}

	@Override
	public ResponseEntity<List<AlteraDadosContratoDTO>> obterContratoEstudanteEmpresa(
			@RequestHeader("Authorization") String token,
			@RequestParam(value = "cpfEstudante", required = false) String cpfEstudante,
			@RequestParam(value = "codigoEstudante", required = false) String codigoEstudante,
			@RequestParam(value = "idContratoEstudanteEmpresa", required = false) Long idContratoEstudanteEmpresa,
			@RequestParam(defaultValue = "true") Boolean ativo) {

		List<ContratoEstudanteEmpresa> listaContratoEstudante = contratoEstudanteEmpresaService
				.buscarContratoPorCpfOrCodigoEstudante(codigoEstudante, cpfEstudante);

		return ResponseEntity.ok(alteraDadosContratoMapper.convertTransferObject(listaContratoEstudante));

	}

	@Override
	public ResponseEntity<AlteraDadosContratoDTO> buscarDetalhesContratoEstudante(@RequestHeader("Authorization") String token,
			Long idContratoEstudanteEmpresa) {
//		return ResponseEntity.ok(this.alteraDadosContratoMapper.convertTransferObject(
//				this.contratoEstudanteEmpresaService.buscarContratoEstudEmpPorId(idContratoEstudanteEmpresa)));
		return ResponseEntity.ok(this.alteraDadosContratoMapper.convertTransferObject(
				this.contratoEstudanteEmpresaService.buscarContratoEstudEmpPorId(idContratoEstudanteEmpresa)));
	}

	@Override
	public ResponseEntity<Void> atualizarDadosContrato(@PathVariable Long idContratoEstudanteEmpresa) {
		contratoEstudanteEmpresaService.atualizarSituacaoParaEfetivado(idContratoEstudanteEmpresa);
		return ResponseEntity.noContent().build();
	}
}

//visualizarAtualizarDadosContrato
