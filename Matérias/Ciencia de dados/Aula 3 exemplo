# -*- coding: utf-8 -*-
"""Pandas.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10d3k1p7pZ4VGfRIQyYAWHLQoHy3C1evt
"""

import pandas as pd
import numpy as  np

"""# Parte 1 - Séries"""

dic_alunos = {'M02':'João','M05':'Maria','M13':'Bill',
              'M14':'Cris','M19':'Jimi'}
alunos = pd.Series(dic_alunos)

# Acessando o vetor pelo índice
print(alunos.iloc[0])

# Acessando o vetor pelo identificador
print(alunos['M05'])

# Acessando o vetor por uma sequência
print(alunos[1:3])

# Acessando o vetor por uma lista de indentificadores
print(alunos[['M13','M02','M19']])

#cria as Series s1 e s2
s1 = pd.Series([2,4,6])
s2 = pd.Series([1,3,5])
print('s1:'); print(s1)
print('s2:'); print(s2)

#efetua as operações aritméticas
s1 * 2

s1 + s2

np.sqrt(s1)

# Série Temporal
dias = ['10/02/2019', '11/02/2019','12/02/2019','13/02/2019',
		'14/02/2019','15/02/2019']
temp_max = [31,35,34,28,27,27]
serie_temporal = pd.Series(temp_max,index=dias)

#converte o tipo do índice para datetime e imprime a série
serie_temporal.index = pd.to_datetime(serie_temporal.index,
									  format='%d/%m/%Y')
serie_temporal

"""# Parte 2 - Dataframes"""

import pandas as pd

# Datafreames são tabelas que podem ser buscado pelo identificador quanto por linha

paises = pd.read_csv('https://raw.githubusercontent.com/celsocrivelaro/simple-datasets/main/paises.csv', index_col='sigla')
paises

# Buscando por identificador
paises.loc['BR']

# Buscando por linha
paises.iloc[3]

# Exibindo colunas
paises[['nome', 'extensao']]

# Filtrando linhas
paises[(paises['extensao'] > 2000)]

# Criando nova coluna
paises['extensao_em_milhoes'] = paises['extensao'] * 100_000
paises

##### Exemplo 2 #####
### flags dataset ###

import pandas as pd

flags = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/flags/flag.data',  header=None)
flags.columns = ["name","landmass","zone","area","population","language","religion","bars","stripes","colours","red",
                 "green","blue","gold","white","black","orange","mainhue","circles","crosses","saltires","quarters",
                 "sunstars","crescent","triangle","icon","animate","text","topleft","botright"]

v = (flags['landmass']==6) # gera uma series com elementos booleanos
flags_oceania = flags[v] # retornar só o que é true

#imprime os países da Oceania
flags_oceania

"""

```python
(flags['landmass']!=6 ): países que não são da Oceania;
(flags['colours'] <=2) : países com no máximo 2 cores em sua bandeira;
(flags['language'] ==1) | (flags['language'] ==4) : países cujo idioma predominante é o inglês ou o alemão;
(flags['landmass'] ==6) & (flags['area'] >200) : países da Oceania, com área acima de 200 mil quilômetros quadrados.
(flags['landmass'] ==6) & (flags['area'] >200) & (flags['language'] ==1) : países da Oceania, com área acima de 200 mil quilômetros quadrados, em que o idioma predominante é o inglês.
```

"""

### Seleção

# Seleciona apenas as linhas dos países da oceania  com área acima de 200 mil quilômetros quadrados
v =(flags['landmass'] ==6) & (flags['area'] >200)
df = flags[v]
# Projeta apenas as colunas "name", "colours", "language", "landmass" e "area"
df = df[['name','colours','language','landmass','area']]

# reseta os índices
df = df.reset_index(drop=True)

df

# Formatando valores com funções

def maiusculo(valor):
  return valor.upper()

flags['nameUpper'] = flags['name'].apply(maiusculo)

flags

#################################
# Importação CSV
#################################
paises = pd.read_csv("https://raw.githubusercontent.com/celsocrivelaro/simple-datasets/main/paises_simples.csv",index_col="sigla")

#print(paises.iloc("BR"))

paises_reduzidos = paises[["nome", "continente"]]
paises_reduzidos

serie_gols = pd.read_csv("https://raw.githubusercontent.com/celsocrivelaro/simple-datasets/main/gols.txt", sep=" ", index_col=0).squeeze()
#converte o tipo do índice para datetime e imprime a série
serie_gols.index = pd.to_datetime(serie_gols.index, format='%d/%m/%Y')
serie_gols

#################################
# Importação Excel
#################################
import openpyxl

cidades = pd.read_excel("https://github.com/celsocrivelaro/simple-datasets/raw/main/capitais.xlsx")
print(cidades)

# #################################
# # Importação JSON
# #################################
import json
import urllib.request

urllib.request.urlretrieve("https://raw.githubusercontent.com/celsocrivelaro/simple-datasets/main/notas.json", "notas.json")
with open("notas.json") as f:
    j_notas = json.load(f)

notas = pd.DataFrame(j_notas,
                     columns=['matricula','notas'])
print(notas)

# #################################
# # Exportação CSV
# #################################
dados = {'codigo': [1001,1002,1003,1004,1005],
         'nome':['Leite', 'Café', 'Biscoito', 'Chá', 'Torradas']}
produtos = pd.DataFrame(dados)

produtos.to_csv("produtos_exportados.csv")

# #################################
# # Exportação Excel
# #################################
dados = {'codigo': [1001, 1002, 1003, 1004, 1005],
            'nome': ['Leite', 'Café', 'Biscoito', 'Chá', 'Torradas']}
produtos = pd.DataFrame(dados)

produtos.to_excel("produtos_exportados.xlsx")

"""## Parte 3 - Limpeza de Dados"""

################################
## Parte 3 - Limpeza de dados ##
################################
import pandas as pd
import numpy as np
df = pd.DataFrame(dict(age=[5, 6, np.NaN],
                   born=[pd.NaT, pd.Timestamp('1939-05-27'),
                         pd.Timestamp('1940-04-25')],
                   name=['Alfred', 'Batman', ''],
                   toy=[None, 'Batmobile', 'Joker']))

df

# Removendo Dados nulos
df.dropna()

# Trocando valores: 0 por 5
df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
                   'B': [5, 6, 7, 8, 9],
                   'C': ['a', 'b', 'c', 'd', 'e']})
df.replace(0, 5)

"""# Parte 5 - Cálculos"""

import pandas as pd
dados = {"jogador": ["Marcelo",
                     "Pedro",
                     "Marcelo",
                     "Adriano",
                     "Mauro",
                     "Pedro",
                     "Marcelo"],
         "infracao": ["FALTA VIOLENTA",
                      "RECLAMACAO",
                      "FALTA COMUM",
                      "RECLAMACAO",
                      "FALTA COMUM",
                      "FALTA VIOLENTA",
                      "RECLAMACAO"],
         "punicao": [4,1,3,2,4,4,2],
         "juiz_A": [4,1,3,2,4,4,2],
         "juiz_B": [2,1,4,1,1,5,6]
         }
df = pd.DataFrame(dados)
print("média:", df['punicao'].mean())
print("mediana:", df['punicao'].median())
print("moda: ", df['punicao'].mode().values)

print("Juiz A:")
print("-------")
print("amplitude:", df['juiz_A'].max() - df['juiz_A'].min())
print("variância:", df['juiz_A'].var())
print("desvio padrão:", df['juiz_A'].std())
print("\nJuiz B")
print("-------")
print("amplitude:", df['juiz_B'].max() - df['juiz_B'].min())
print("variância:", df['juiz_B'].var())
print("desvio padrão:", df['juiz_B'].std())

# Ordenação
dados = {"nadador": ["Simonas Bilis",
                     "Benjamin Proud",
                     "Anthony Ervin",
                     "Florent Manaudou",
                     "Andriy Hovorov",
                     "Nathan Adrian",
                     "Bruno Fratus",
                     "Brad Tandy"],
         "nacionalidade": ["Lituânia",
                           "Grã-Bretanha",
                           "Estados Unidos",
                           "França",
                           "Ucrânia",
                           "Estados Unidos",
                           "Brasil",
                           "África do Sul"],
         "tempo": [22.08,
                   21.68,
                   21.40,
                   21.41,
                   21.74,
                   21.49,
                   21.79,
                   21.79]
         }
raias = list(range(1,9))

prova50m = pd.DataFrame(dados, index=raias)
prova50m.index.name = 'raia'
#2-ordena pelo tempo de forma crescente
prova50m = prova50m.sort_values(by="tempo") #ascending=False
print("* * resultado final ordenado por tempo:")
print(prova50m)
#3 - gera os rankings - Gera um ranking baseado em uma coluna
resultado_por_raia = prova50m['tempo'].rank(method="min")
print("\n* * posição de cada nadador (por raia):")
print(resultado_por_raia)

"""# Parte 6 - Merge"""

import pandas as pd

df_sql = pd.DataFrame({"email":["rakesh@xyz.com", "ecg@acmecorpus.com"]})
df_python = pd.DataFrame({"email":["ana@xyz.com", "jonas@acmecorpus.com", "rakesh@xyz.com"]})

#2.1 União (relação de alunos distintos)
alunos = pd.concat([df_sql, df_python], ignore_index=True)
alunos = alunos.drop_duplicates()
#2.2 Interseção (quem fez ambos os cursos)
sql_e_python = df_sql.merge(df_python)
#2.3 Diferença (quem fez só SQL e quem fez só Python)
so_sql = df_sql[df_sql.email.isin(df_python.email)==False]
so_python = df_python[df_python.email.isin(df_sql.email)==False]

print('------------------------------')
print('Alunos Distintos:')
print(alunos)
print('------------------------------')
print('Alunos cursaram SQL e Python:')
print(sql_e_python)
print('------------------------------')
print('Alunos cursaram apenas SQL:')
print(so_sql)
print('------------------------------')
print('Alunos cursaram apenas Python:')
print(so_python)

## Junção Natural
R = pd.DataFrame({"a":[1,7],
                  "b":[2,4]})
S = pd.DataFrame({"b":[2,4,9],
                  "c":[3,6,1],
                  "d":[5,9,5]})

juncao_natural = pd.merge(R, S)
print('------------------------------')
print("R:")
print(R)
print('------------------------------')
print("S:")
print(S)
print('------------------------------')
print("junção natural entre R e S:")
print(juncao_natural)

## Junção Interna
dic_depto = {"id":["D1","D2","D3","D4"],
             "nomDepto": ["Compras","RH","TI","Vendas"],
             "local":["SP","RJ","RJ","SP"]
             }
dic_emp = {"num":[3199,3269,3555,3788,3844],
           "nome": ["Ana","David","José","Marina","Luís"],
           "salario":[1600,2975,1500,5000,3000],
           "idDepto": ["D2","D3",None,"D2","D4"]
           }
depto = pd.DataFrame(dic_depto)
emp = pd.DataFrame(dic_emp)

juncao_interna = pd.merge(emp, depto, left_on="idDepto", right_on=
"id")
print('------------------------------')
print("depto:")
print(depto)
print('------------------------------')
print("emp:")
print(emp)
print('------------------------------')
print("junção interna:")
print(juncao_interna)